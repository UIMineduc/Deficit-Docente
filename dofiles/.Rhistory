return(base %>% subset(county_id %in% matched_units))
}
cm_whole_sample <- execute_card_matching(base, matching_vars)
meantab(fine_covs,D_it,treated_units,control_units)
fine_covs = cbind(
m_vars_df$inv_muni_10,
m_vars_df$share_mype_10,
m_vars_df$n_empresas_bienes_10,
m_vars_df$productividad_10
)
fine = list(covs = fine_covs)
meantab(cm_whole_sample,D_it,treated_units,control_units)
#Title: Cardinality Matching.R
#Author: Alonso Arra?o
#  Project: Desastres Socionaturales
#Program: Se programa cardinality matching.
#Output Files: matching results.
# Preamble ----------------------------------------------------------------
rm(list = ls())
library(tidyverse)
library(foreign)
library(dplyr)
library(haven)
library(dplyr)
library(sjmisc)
library(car)
library(stargazer)
library(designmatch) #Paquete necesario de cardinality matching
library(Rglpk) #Paquete necesario de solver
# Loading Dataset ---------------------------------------------------------
ignacio <-
'/Users/germanriveros/Google Drive/My Drive/Universidad/Investigacion'
alonso <- "C:/Users/Alonso/Desktop/Proyectos"
base <-
read_dta(
file.path(
alonso,
'CIGIDEN/Datasets-all-projects/Treated-Data-CIGIDEN/Base_final/base_full_all_treatments.dta'
)
)
# Generating Matching Variables -------------------------------------------
matching_vars <-
base %>%
subset(anio == 2005) %>%
mutate(
D_it = 1 * main_treatment,
inv_muni_10 = ntile(inv_muni_pc_a61_uf, 5),
share_mype_10 = ntile(share_mype, 5),
n_empresas_bienes_10 = ntile(n_empresas_rubros_bienes, 5),
productividad_10 = ntile(productividad, 5)
) %>%
dplyr::select(
county_id,
region,
D_it,
inv_muni_10,
share_mype_10,
n_empresas_bienes_10,
productividad_10
) %>%
drop_na()
fine_covs = cbind(
m_vars_df$inv_muni_10,
m_vars_df$share_mype_10,
m_vars_df$n_empresas_bienes_10,
m_vars_df$productividad_10
)
fine = list(covs = fine_covs)
fine_covs = cbind(
matching_vars$inv_muni_10,
matching_vars$share_mype_10,
matching_vars$n_empresas_bienes_10,
matching_vars$productividad_10
)
fine = list(covs = fine_covs)
t_max = 60 * 20
solver = "glpk"
approximate = 0
solver = list(
name = solver,
t_max = t_max,
approximate = approximate,
round_cplex = 0,
trace = 0
)
out_1 = cardmatch(base$D_it, fine = fine, solver = solver)
out_1 = cardmatch(matching_vars$D_it, fine = fine, solver = solver)
treated_units <-
matching_vars[out_1$t_id,] %>% dplyr::select(county_id)
control_units <-
matching_vars[out_1$c_id,] %>% dplyr::select(county_id)
matched_units <-
c(as.vector(treated_units$county_id),
as.vector(control_units$county_id))
return(base %>% subset(county_id %in% matched_units))
meantab(base, D_it, treated_units, control_units, digits=2)
meantab(base, D_it, treated_units, control_units, digits=2)
meantab(base, base$D_it, matched_units$treated_units, matched_units$control_units, digits=2)
data(present)
library(devtools)
library(dplyr)
library(ggplot2)
library(statsr)
data(present)
rm(list=ls())
data(present)
dim(present)
range(present$year)
present <- present %>%
mutate(total=boys+girls)
present <- present %>%
mutate(total=boys+girls)
present <- present %>%
mutate(prop_boys=boys/total)
ggplot(data=present, aes(x=year, y=prop_boys)) + geom_line()
more_boys <-boys>girls
more_boys <-present$boys>present$girls
rm(more_boys)
present <- present %>%
mutate(more_boys = boys > girls)
present$more_boys
View(present)
View(present)
present <- present %>%
mutate( prop_boy_girl = boys/girls)
ggplot(data = present,aes(x = prop_boy_girl, y = year)) + geom_line
present <- present %>%
mutate( prop_boy_girl = boys/girls)
ggplot(data = present , aes(x = prop_boy_girl, y = year)) + geom_line
ggplot(data = present , aes(x = prop_boy_girl, y = year)) + geom_line()
present <- present %>%
mutate( prop_boy_girl = boys/girls)
ggplot(data = present , aes(x=prop_boy_girl, y = year)) + geom_line()
ggplot(data = present , aes(x=year, y = prop_boy_girl)) + geom_line()
order(present$total)
order(total)
order(present$total, decreasing = TRUE)
print(present$total[68])
print(present$year[68])
order(present$total, decreasing = FALSE)
print(present$total[1])
print(present$year[1])
present<- present.order(total, decreasing= TRUE)
present<- present[order(total, decreasing= TRUE)]
present<- present[order(present$total, decreasing= TRUE)]
present<- present[order(present$total, decreasing= TRUE)]
present<- present[order(present$total, decreasing= TRUE),]
rint(present$year[1], present$total[1])
present<- present[order(present$total, decreasing= TRUE),]
print(present$year[1])
print(present$total[1])
library(xfun)
install.packages(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
rm(list=ls())
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
r nrow(nycflights)
`r nrow(nycflights)`
dim(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
plot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU") # acá está filtrando los destinos
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
rdu_flights %>% ## la primera parte es "llamar la bbdd"
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
rdu_flights %>% ## la primera parte es "llamar la bbdd"
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n()) ##meand_dd es una variable creada para la tabla que no es almacenada
?summarise
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights %>%
summarize(total_vuelos=n())
ggplot(data=sfo_feb_flights, aes(y=arr_delay))+ geom_histogram()
ggplot(data=sfo_feb_flights, aes(x=arr_delay))+ geom_histogram()
ggplot(data=sfo_feb_flights, aes(x=arr_delay))+ geom_histogram(bins = 15)
?geom_histogram
ggplot(data=sfo_feb_flights, aes(x=arr_delay))+ geom_histogram(binwidth = 15)
?nycflights
sfo_feb_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
ggplot(data=sfo_feb_flights, aes(x=arr_delay))+ geom_histogram(binwidth = 15)
sfo_feb_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
View(rdu_flights)
View(rdu_flights)
View(sfo_feb_flights)
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
nycflights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
ycflights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n
nycflights %>%
View(nycflights)
View(nycflights)
nycflights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(median = median(arr_delay), Inter = IQR(arr_delay), n = n())
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(mean_dd = mean(dep_delay)) %>% # hacemos el sum
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(median_dd = median(dep_delay)) %>% # hacemos el sum
arrange(desc(median_dd)) # que los ordene de mayor a menor
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(median_dd = median(dep_delay), mean_dd = mean(dep_delay)) %>% # hacemos el sum
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(median_dd = median(dep_delay), mean_dd = mean(dep_delay)) # hacemos el sum
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(median_dd = median(dep_delay), mean_dd = mean(dep_delay)) %>% # hacemos el sum
arrange(desc(median_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights %>%
group_by(month) %>% # agrupamos por mes
summarise(median_dd = median(dep_delay), mean_dd = mean(dep_delay)) %>% # hacemos el sum
arrange(desc(median_dd))
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
nycflights$origin
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
ycflights <- nycflights %>%
mutate(avg_speed=distance/(air_time/60))
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed=distance/(air_time/60))
nycflights <- nycflights %>%
mutate(avg_speed=distance/(air_time/60)) %>%
arrange(desc(avg_speed))
nycflights <- nycflights %>%
mutate(avg_speed=distance/(air_time/60)) %>%
arrange(desc(avg_speed)) %>%
select(avg_speed, tailnum)
ggplot(data=nycflights, aes(x=avg_speed, y=distance)) + geom_dotplot()
ggplot(data=ycflights, aes(x=avg_speed, y=distance)) + geom_dotplot()
ggplot(data=ycflights, aes(x=avg_speed, y=distance)) + geom_dotplot()
ggplot(data=ycflights, aes(x=avg_speed, y=distance)) + geom_point()
ggplot(data=ycflights, aes(x=distance, y=avg_speed)) + geom_point()
View(ycflights)
View(ycflights)
nycflights <- ycflights
nycflights <- ycflights
nycflights <- nycflights %>%
mutate(arr_type=ifelse(arr_delay<=0,"on time","delayed"))
nycflights <- ycflights
nycflights <- nycflights %>%
mutate(arr_type=ifelse(arr_delay<=0,"on time","delayed"))
View(nycflights)
nycflights <- ycflights
nycflights <- nycflights %>%
mutate(arr_type=ifelse(arr_delay<=0,"on time","delayed"))
nycflights %>%
group_by(dep_type) %>%
summarise(ratio_dep_arr=sum(arr_delay=="on time")/n())
nycflights %>%
group_by(dep_type) %>%
summarise(ratio_dep_arr=sum(arr_delay=="on time")/n())
View(ycflights)
View(nycflights)
nycflights %>%
group_by(dep_type) %>%
summarise(ratio_dep_arr=sum(arr_delay=="on time")/n())
nycflights %>%
group_by(dep_type) %>%
summarise(ratio_dep_arr=sum(arr_delay == "on time")/n())
nycflights %>%
group_by(dep_type) %>%
summarise(ratio_dep_arr=sum(arr_type == "on time")/n())
ggplot(data = nycflights, aes(x = ratio_dep_arr, fill = dep_type)) +
geom_bar()
ggplot(data = nycflights, aes(x = arr_type, fill = dep_type)) +
geom_bar()
rm(list=ls())
library(tidyverse)
library(datos)
install.packages("datos")
library(tidyverse)
library(datos)
df <-millas
str(df)
df <-millas
df <-millas
str(df)
ggplot(data=df,aes(x=cilindrada, y=autopista)) + geom_point()
#Una forma alternativa de crear este gráfico es la siguiente, la diferencia es que las opcioens se incluyen dentro de la opción del tipo de gráfico.
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista))
ggplot(data=df) # Este comando al no específicar mapas ni variables arroja un gráfico vacío
#al comienzo de este documento la base millas se cargó como matriz "df"
dim(df) #Arroja las dimensiones de la bb.dd en este caso el resultado es 234 filas y 11 columnas (observaciones y variables respectivamente)
?millas
ggplot(data=df,aes(x=autopista,y=cilindros))+geom_point()
ggplot(data=df,aes(x=factor(clase),y=traccion))+geom_point()
#el gráfico no es útil puesto que son dos variables categóricas
summary(df$traccion)
ggplot(data = df) +
geom_point(mapping = aes(x = cilindrada, y = autopista, color = clase))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, size = clase))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, alpha = clase))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, shape = clase))
plot(pressure)
dm(df)
str(df)
summarise(modelo)
summarise(df$modelo)
summary(df$modelo)
describe(df$modelo)
summary(df$modelo)
unique(df$modelo)
str(df)
unique(df$combustible)
str(df)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, shape = cilindrada))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, shape = combustible))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista, shape = ciudad))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista),size = ciudad)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = ciudad))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = modelo))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = cilindrada))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = clase))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = ciudad))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,size = anio))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista),color=cilindrada<5))
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista),color=cilindrada<5)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista,color=cilindrada<5))
ggplot(data = df) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_wrap(~ clase, nrow = 2)
ggplot(data = df) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_wrap(~ clase, nrow = 3)
ggplot(data = millas) +
geom_point(mapping = aes(x = traccion, y = cilindros)) +
facet_grid( traccion ~ cilindros)
ggplot(data = millas) +
geom_point(mapping = aes(x = traccion, y = cilindros))
ggplot(data = millas) +
geom_point(mapping = aes(x = traccion, y = cilindros)) +
facet_grid( traccion ~ cilindros)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_grid(traccion ~ .)
ggplot(data = millas) +
geom_point(mapping = aes(x = traccion, y = cilindros)) +
facet_grid( traccion ~ cilindros)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_grid(traccion ~ .)
ggplot(data = millas) +
geom_point(mapping = aes(x = traccion, y = cilindros)) +
facet_grid( traccion ~ cilindros)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_grid(traccion ~ .)
ggplot(data = millas) +
geom_point(mapping = aes(x = cilindrada, y = autopista)) +
facet_grid(. ~ cilindros)
library(tidyverse)
library(datos)
#setwd("D:\\OneDrive - Ministerio de Educación\\0 0 3 Curso R")
setwd("C:\\Users\\Alonso\\OneDrive - Ministerio de Educación\\0 0 3 Curso R")
install.packages("maps")
df_aerolinea <- datos::aerolineas
df_aeropuerto <- datos::aeropuertos
df_aviones <-  datos::aviones
df_clima <- datos::clima
df_vuelos <- datos::vuelos
vuelos2 <- df_vuelos %>%
group_by(destino) %>%
mutate( mean_atraso=mean(atraso_llegada,na.rm=TRUE))
vuelos2 <- vuelos2 %>%
select(destino,mean_atraso)
ejercicio1 <- df_aeropuerto %>%
left_join(vuelos2, c("codigo_aeropuerto" = "destino")) %>%
filter(!is.na(mean_atraso))
ejercicio1 %>%
ggplot(aes(longitud, latitud, colour = mean_atraso)) +
geom_point()
ejercicio1 %>%
ggplot(aes(longitud, latitud, colour = mean_atraso)) +
borders("state")+
geom_point()
ejercicio1 %>%
ggplot(aes(longitud, latitud, colour = mean_atraso)) +
borders("state")+
geom_point() +
coord_quickmap()
ejercicio1 <- df_aeropuerto %>%
inner_join(vuelos2, c("codigo_aeropuerto" = "destino")) %>%
filter(!is.na(mean_atraso))
ejercicio1 %>%
ggplot(aes(longitud, latitud, colour = mean_atraso)) +
borders("state")+
geom_point() +
coord_quickmap()
?maps
?borders
dir <- "C:\\Users\\Alonso\\OneDrive - Ministerio de Educación\\2022\\18 Deficit Docente\\Deficit-Docente\\dofiles"
setwd(dir)
getwd()
?read_excel()
knitr::opts_chunk$set(echo = TRUE)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url)
library(tidyverse)
library(readxl)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url)
data1 <- read_csv2(url)
data1 <- read_table(url)
View(data1)
data1 <- read_tsv(url)
View(data1)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url)
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url,sep=",")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url,delim=",")
?read_csv
data1 <- read_csv(url,delim=",")
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data"
data1 <- read_csv(url)
View(data1)
tmp_filename <- tempfile() # nombre temporal
download.file(url, tmp_filename) #descargamos el archivo con un nombre temporal
data1 <- read_csv(tmp_filename) #asignamos a un objeto
getwd()
data1 <- read_csv(tmp_filename)
data1 <- read_csv(tmp_filename,delim=",") #asignamos a un objeto
tmp_filename <- tempfile() # nombre temporal
download.file(url, tmp_filename) #descargamos el archivo con un nombre temporal
data1 <- read_csv(tmp_filename,delim=",") #asignamos a un objeto
data1 <- read_csv(tmp_filename,header=FALSE) #asignamos a un objeto
tmp_filename <- tempfile() # nombre temporal
download.file(url, tmp_filename)
tmp_filename <- tempfile() # nombre temporal
download.file(url, tmp_filename) #descargamos el archivo con un nombre temporal
data1 <- read_csv(tmp_filename,header=FALSE)
?read_csv
data1 <- read_csv(tmp_filename,col_names = =FALSE)
data1 <- read_csv(tmp_filename,col_names =FALSE)
data1 <- read_delim("D:\\PC- AMD\\Descargas\\data1.txt",delim=",")
read_delim?
data1 <- read_delim("D:\\PC- AMD\\Descargas\\data1.txt")
data1 <- read_csv("D:\\PC- AMD\\Descargas\\data1.txt")
update.packages("readr")
data1 <- read_csv("D:\\PC- AMD\\Descargas\\data1.txt")
rm(list=ls())
install.packages(c("dbplyr", "devtools", "ggplot2", "readr", "readxl"))
install.packages(c("dbplyr", "devtools", "ggplot2", "readr", "readxl"))
install.packages(c("dbplyr", "devtools", "ggplot2", "readr", "readxl"))
